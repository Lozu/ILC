IL compiler - компилятор промежуточного языка

Промежуточный язык есть упращенная до минумума вариация QBE IL. Он будет
компилироваться в x86_64 nasm ассемблер.
Пока что, единственных тип данных - 64-битное целое (i).

Пример

func i $f(%a, %b)
{
	%1 = add %a, %b
	ret %1
}

Поддерживаемые команды

%i - переменная
i64 - 64-битная константа

	%i add %i, %i                  сложение
	%i copy (%i|i64)               копирование
	ret %i                         возврат значения из функции

Реализация
==========

Этапы работы
************

	1. Парсинг на лексемы
	2. Построение структуры
	3. Аллокация регистров
	4. Генерация ассембрера


1.  Парсинг на лексемы
----------------------
Через символы-разделители. Тип лексемы определяется в это-же время.

2. Построение структуры
-----------------------
Структура строится для каждой функции отдельно, последовательно одна за
одной. Сперва выедается заголовок функции, выбираются аргументы. Эти аргу-
менты проверяются на уникальность.
Далее происходит переименование регистровых переменных.
После этого строятся команды и одновременно с этим проверяется их коррект-
ность.

3. Аллокация регистров
----------------------
Цели используемоего алгоритма для аллокации регистров просты: память по воз-
можности не должна использоваться как место хранения переменных, если есть
свободные регистры. Аллокация начинается с того, что определяются интервалы
жизни переменных. После этого создаётся копия множества интервалов. Оригинал
сортируется по возврастанию начал, а копия - по возврастанию концов. Затем
начинается последовательлый проход от начала и до конца.

Если проходчик натыкается на новую переменную и имеются свободные регистры,
то один из свободных регистров назначается этой переменной. Если свободных
регистров нет, то назначается участок памяти. Когда во время работы проход-
чика интервал очередной переменной заканчивается, то регистр или память,
который она занимала, освобождается. После того как шаг отработан, проходчик
смотрит на переменные, хранящиеся в памяти. Если такие есть и свободные ре-
гистры находятся в наличии, то значение переменной переносится в регистр, а
память освобождается.
